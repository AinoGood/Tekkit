-- Gui to Lua
-- Version: 3.2

-- Instances:

local ScreenGui = Instance.new("ScreenGui")
local main = Instance.new("Frame")
local title = Instance.new("TextLabel")
local scrollingframe = Instance.new("ScrollingFrame")
local extender = Instance.new("Frame")
local Extender = Instance.new("TextLabel")
local extendertoggle = Instance.new("ImageButton")
local multi = Instance.new("TextBox")
local extendmulti = Instance.new("TextLabel")
local esp = Instance.new("Frame")
local TitanESP = Instance.new("TextLabel")
local esptoggle = Instance.new("ImageButton")
local grabescape = Instance.new("Frame")
local grabescape_2 = Instance.new("TextLabel")
local escapetoggle = Instance.new("ImageButton")
local bladerefill = Instance.new("Frame")
local grabescape_3 = Instance.new("TextLabel")
local bladetoggle = Instance.new("ImageButton")

--Properties:

ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

main.Name = "main"
main.Parent = ScreenGui
main.BackgroundColor3 = Color3.fromRGB(79, 79, 79)
main.BorderColor3 = Color3.fromRGB(0, 0, 0)
main.BorderSizePixel = 0
main.Position = UDim2.new(0.402093232, 0, 0.297959179, 0)
main.Size = UDim2.new(0.19526054, 0, 0.403061211, 0)
main.Style = Enum.FrameStyle.DropShadow

title.Name = "title"
title.Parent = main
title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
title.BackgroundTransparency = 0.900
title.BorderColor3 = Color3.fromRGB(0, 0, 0)
title.BorderSizePixel = 0
title.Position = UDim2.new(0.0653599501, 0, 0.0363763459, 0)
title.Size = UDim2.new(0.867895961, 0, 0.129052192, 0)
title.Font = Enum.Font.Bangers
title.Text = "tekkit AotR Hub"
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.TextScaled = true
title.TextSize = 14.000
title.TextStrokeTransparency = 0.000
title.TextWrapped = true

scrollingframe.Name = "scrollingframe"
scrollingframe.Parent = main
scrollingframe.Active = true
scrollingframe.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
scrollingframe.BackgroundTransparency = 1.000
scrollingframe.BorderColor3 = Color3.fromRGB(0, 0, 0)
scrollingframe.BorderSizePixel = 0
scrollingframe.Position = UDim2.new(0.0480448045, 0, 0.175562799, 0)
scrollingframe.Size = UDim2.new(0.927312255, 0, 0.786182404, 0)
scrollingframe.CanvasPosition = Vector2.new(0, 150)
scrollingframe.VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar
scrollingframe.VerticalScrollBarPosition = Enum.VerticalScrollBarPosition.Left

extender.Name = "extender"
extender.Parent = scrollingframe
extender.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
extender.BackgroundTransparency = 1.000
extender.BorderColor3 = Color3.fromRGB(0, 0, 0)
extender.BorderSizePixel = 0
extender.Position = UDim2.new(0.0469999984, 0, 0.109999999, 0)
extender.Size = UDim2.new(0.917999983, 0, 0.0700000003, 0)

Extender.Name = "Extender"
Extender.Parent = extender
Extender.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Extender.BackgroundTransparency = 0.950
Extender.BorderColor3 = Color3.fromRGB(0, 0, 0)
Extender.BorderSizePixel = 0
Extender.Position = UDim2.new(0.0309665091, 0, 0.211424991, 0)
Extender.Size = UDim2.new(0.600000024, 0, 0.761420369, 0)
Extender.Font = Enum.Font.GrenzeGotisch
Extender.Text = "Hitbox Extender"
Extender.TextColor3 = Color3.fromRGB(255, 255, 255)
Extender.TextSize = 28.000
Extender.TextStrokeTransparency = 0.000
Extender.TextWrapped = true

extendertoggle.Name = "extendertoggle"
extendertoggle.Parent = extender
extendertoggle.BackgroundColor3 = Color3.fromRGB(170, 0, 0)
extendertoggle.BorderColor3 = Color3.fromRGB(0, 0, 0)
extendertoggle.BorderSizePixel = 0
extendertoggle.Position = UDim2.new(0.776480675, 0, 0.300993741, 0)
extendertoggle.Size = UDim2.new(0.109999999, 0, 0.575000107, 0)
extendertoggle.ImageColor3 = Color3.fromRGB(0, 255, 0)

multi.Name = "multi"
multi.Parent = extender
multi.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
multi.BorderColor3 = Color3.fromRGB(0, 0, 0)
multi.BorderSizePixel = 0
multi.Position = UDim2.new(0.776000023, 0, 1.08923328, 0)
multi.Size = UDim2.new(0.109999999, 0, 0.574999988, 0)
multi.Font = Enum.Font.SourceSans
multi.Text = "1"
multi.TextColor3 = Color3.fromRGB(0, 0, 0)
multi.TextSize = 14.000

extendmulti.Name = "extendmulti"
extendmulti.Parent = extender
extendmulti.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
extendmulti.BackgroundTransparency = 0.950
extendmulti.BorderColor3 = Color3.fromRGB(0, 0, 0)
extendmulti.BorderSizePixel = 0
extendmulti.Position = UDim2.new(0.0309665091, 0, 1, 0)
extendmulti.Size = UDim2.new(0.600000024, 0, 0.761420369, 0)
extendmulti.Font = Enum.Font.GrenzeGotisch
extendmulti.Text = "Extension Multiplier"
extendmulti.TextColor3 = Color3.fromRGB(255, 255, 255)
extendmulti.TextSize = 28.000
extendmulti.TextStrokeTransparency = 0.000
extendmulti.TextWrapped = true

esp.Name = "esp"
esp.Parent = scrollingframe
esp.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
esp.BackgroundTransparency = 1.000
esp.BorderColor3 = Color3.fromRGB(0, 0, 0)
esp.BorderSizePixel = 0
esp.Position = UDim2.new(0.0471820533, 0, 0.00999999978, 0)
esp.Size = UDim2.new(0.917761326, 0, 0.0700000003, 0)

TitanESP.Name = "Titan ESP"
TitanESP.Parent = esp
TitanESP.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TitanESP.BackgroundTransparency = 0.950
TitanESP.BorderColor3 = Color3.fromRGB(0, 0, 0)
TitanESP.BorderSizePixel = 0
TitanESP.Position = UDim2.new(0.0309665091, 0, 0.211424991, 0)
TitanESP.Size = UDim2.new(0.600000024, 0, 0.761420369, 0)
TitanESP.Font = Enum.Font.GrenzeGotisch
TitanESP.Text = "Titan ESP"
TitanESP.TextColor3 = Color3.fromRGB(255, 255, 255)
TitanESP.TextSize = 28.000
TitanESP.TextStrokeTransparency = 0.000
TitanESP.TextWrapped = true

esptoggle.Name = "esptoggle"
esptoggle.Parent = esp
esptoggle.BackgroundColor3 = Color3.fromRGB(170, 0, 0)
esptoggle.BorderColor3 = Color3.fromRGB(0, 0, 0)
esptoggle.BorderSizePixel = 0
esptoggle.Position = UDim2.new(0.776480675, 0, 0.300993741, 0)
esptoggle.Size = UDim2.new(0.109999999, 0, 0.575000107, 0)
esptoggle.ImageColor3 = Color3.fromRGB(0, 255, 0)

grabescape.Name = "grabescape"
grabescape.Parent = scrollingframe
grabescape.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
grabescape.BackgroundTransparency = 1.000
grabescape.BorderColor3 = Color3.fromRGB(0, 0, 0)
grabescape.BorderSizePixel = 0
grabescape.Position = UDim2.new(0.0469999984, 0, 0.25, 0)
grabescape.Size = UDim2.new(0.917999983, 0, 0.0700000003, 0)

grabescape_2.Name = "grabescape"
grabescape_2.Parent = grabescape
grabescape_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
grabescape_2.BackgroundTransparency = 0.950
grabescape_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
grabescape_2.BorderSizePixel = 0
grabescape_2.Position = UDim2.new(0.0309665091, 0, 0.211424991, 0)
grabescape_2.Size = UDim2.new(0.600000024, 0, 0.761420369, 0)
grabescape_2.Font = Enum.Font.GrenzeGotisch
grabescape_2.Text = "Auto Escape Grab"
grabescape_2.TextColor3 = Color3.fromRGB(255, 255, 255)
grabescape_2.TextSize = 28.000
grabescape_2.TextStrokeTransparency = 0.000
grabescape_2.TextWrapped = true

escapetoggle.Name = "escapetoggle"
escapetoggle.Parent = grabescape
escapetoggle.BackgroundColor3 = Color3.fromRGB(170, 0, 0)
escapetoggle.BorderColor3 = Color3.fromRGB(0, 0, 0)
escapetoggle.BorderSizePixel = 0
escapetoggle.Position = UDim2.new(0.776480734, 0, 0.30099383, 0)
escapetoggle.Size = UDim2.new(0.109999999, 0, 0.574999988, 0)
escapetoggle.ImageColor3 = Color3.fromRGB(0, 255, 0)

bladerefill.Name = "bladerefill"
bladerefill.Parent = scrollingframe
bladerefill.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
bladerefill.BackgroundTransparency = 1.000
bladerefill.BorderColor3 = Color3.fromRGB(0, 0, 0)
bladerefill.BorderSizePixel = 0
bladerefill.Position = UDim2.new(0.0469999984, 0, 0.349999994, 0)
bladerefill.Size = UDim2.new(0.917999983, 0, 0.0700000003, 0)

grabescape_3.Name = "grabescape"
grabescape_3.Parent = bladerefill
grabescape_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
grabescape_3.BackgroundTransparency = 0.950
grabescape_3.BorderColor3 = Color3.fromRGB(0, 0, 0)
grabescape_3.BorderSizePixel = 0
grabescape_3.Position = UDim2.new(0.0309665091, 0, 0.211424991, 0)
grabescape_3.Size = UDim2.new(0.600000024, 0, 0.761420369, 0)
grabescape_3.Font = Enum.Font.GrenzeGotisch
grabescape_3.Text = "Auto Blade Refill"
grabescape_3.TextColor3 = Color3.fromRGB(255, 255, 255)
grabescape_3.TextSize = 28.000
grabescape_3.TextStrokeTransparency = 0.000
grabescape_3.TextWrapped = true

bladetoggle.Name = "bladetoggle"
bladetoggle.Parent = bladerefill
bladetoggle.BackgroundColor3 = Color3.fromRGB(170, 0, 0)
bladetoggle.BorderColor3 = Color3.fromRGB(0, 0, 0)
bladetoggle.BorderSizePixel = 0
bladetoggle.Position = UDim2.new(0.776480734, 0, 0.30099383, 0)
bladetoggle.Size = UDim2.new(0.109999999, 0, 0.574999988, 0)
bladetoggle.ImageColor3 = Color3.fromRGB(0, 255, 0)



local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Workspace = game:GetService("Workspace")
local UserInputService = game:GetService("UserInputService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local Mouse = LocalPlayer:GetMouse()
local Hovered = false
local Holding = false
local MoveCon = nil
local interface = LocalPlayer.PlayerGui.Interface
local InitialX, InitialY, UIInitialPos

local function Drag()
	if Holding == false then MoveCon:Disconnect(); return end
	local distanceMovedX = InitialX - Mouse.X
	local distanceMovedY = InitialY - Mouse.Y

	main.Position = UIInitialPos - UDim2.new(0, distanceMovedX, 0, distanceMovedY)
end


title.MouseEnter:Connect(function()
	Hovered = true
end)

title.MouseLeave:Connect(function()
	Hovered = false
end)

UserInputService.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		Holding = Hovered
		if Holding then
			InitialX, InitialY = Mouse.X, Mouse.Y
			UIInitialPos = main.Position

			MoveCon = Mouse.Move:Connect(Drag)
		end
	end
end)

UserInputService.InputEnded:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		Holding = false
	end
end)




 local titansfolder = Workspace:WaitForChild("Titans") -- Ensure the Titans folder exists
 local originalNapeProperties = {} -- Table to store original properties of nape parts
if not titansfolder then
    warn("Titans folder not found in workspace")
end
 local espParts = {}
 local ESPEnabled = false
 local extendEnabled = false
 local grabEnabled = false
 local bladeEnabled = false


 local extendMulti = 1 -- Default value for extendMulti
 
 local nape
 -- Function to store the original properties and modify the "Nape" parts
 local function storeAndModifyNapes()
     for _, titan in ipairs(titansfolder:GetChildren()) do
         if titan:IsA("Model") then
             local hitboxes = titan:FindFirstChild("Hitboxes")
             if hitboxes then
                 local hit = hitboxes:FindFirstChild("Hit")
                 if hit then
                     nape = hit:FindFirstChild("Nape")
                     if nape and nape:IsA("BasePart") then
                         -- Store original properties and initial state
                         originalNapeProperties[nape] = {
                             Size = nape.Size,
                             Color = nape.Color,
                             Transparency = nape.Transparency,
                             Material = nape.Material,
                             IsModified = false -- Add a state tracker
                         }
                     end
                 end
             end
         end
     end
 end
 
 local function toggleNapeModifications()
     for nape, originalProperties in pairs(originalNapeProperties) do
         if nape and nape.Parent then
             if extendEnabled then
                 -- Switch to modified properties
                 nape.Size = Vector3.new(40, 40, 40) * extendMulti -- Adjust size as needed
                 nape.Transparency = 0.96
                 nape.Color = Color3.new(1, 1, 1)
                 nape.Material = Enum.Material.Neon
                 nape.CanCollide = false
                 nape.Anchored = false
                 originalProperties.IsModified = true
                 print("Napes Extended")
             else
                 -- Switch back to original properties
                 nape.Size = originalProperties.Size
                 nape.Color = originalProperties.Color
                 nape.Transparency = originalProperties.Transparency
                 nape.Material = originalProperties.Material
                 originalProperties.IsModified = false
                 print("Napes returned to original values")
             end
         end
     end
 end
 
 local function updateNapeSize()
     for nape, originalProperties in pairs(originalNapeProperties) do
         if nape and nape.Parent and originalProperties.IsModified then
             nape.Size = Vector3.new(40, 40, 40) * extendMulti -- Adjust size based on extendMulti
         end
     end
 end

 
 -- Store and modify the nape properties initially
 storeAndModifyNapes()
  -- Apply initial modifications based on extendEnabled and extendMulti
  toggleNapeModifications()

 multi.FocusLost:Connect(function(enterPressed)
    local input = tonumber(multi.Text)
    if input and input >= 0 and input <= 2.5 then
        extendMulti = input
        print("extendMulti updated to:", extendMulti)
        toggleNapeModifications()
    else
        warn("Invalid input. Please enter a value between 0 and 2.5.")
        -- Optionally reset the TextBox to the last valid value
        multi.Text = tostring(extendMulti)
    end
end)




 extendertoggle.Activated:Connect(function()
    extendEnabled = not extendEnabled -- Toggle extendEnabled
    toggleNapeModifications() -- Apply modifications based on extendEnabled and extendMulti
    if extendertoggle.BackgroundColor3 == Color3.fromRGB(170, 0, 0) then
        extendertoggle.BackgroundColor3 = Color3.fromRGB(0, 170, 0)
    else
        extendertoggle.BackgroundColor3 = Color3.fromRGB(170, 0, 0)
    end
 end)




--ESP
--ESP
--ESP
-- Function to create or recreate a highlight ESP part
local function createOrUpdateHighlightESP(fakeModel, color, transparency)
    local existingHighlight = fakeModel:FindFirstChildOfClass("Highlight")
    if existingHighlight then
        existingHighlight:Destroy()
    end
    
    local highlight = Instance.new("Highlight")
    highlight.Adornee = fakeModel
    highlight.FillTransparency = transparency or 0.35
    highlight.FillColor = color or Color3.new(1, 1, 1)
    highlight.OutlineTransparency = transparency or 0
    highlight.OutlineColor = color or Color3.new(1, 0, 0)
    highlight.Enabled = ESPEnabled
    highlight.Parent = fakeModel
    table.insert(espParts, highlight)
    print("Highlight created for model: " .. fakeModel.Name)
end

local function highlightModelsInTitansFolder()
    local titansFolder = workspace:FindFirstChild("Titans")
    if titansFolder then
        for _, model in ipairs(titansFolder:GetChildren()) do
            if model:IsA("Model") and model:FindFirstChildOfClass("Humanoid") then
                local fakeModel = model:FindFirstChild("Fake")
                if fakeModel then
                    createOrUpdateHighlightESP(fakeModel, Color3.new(1, 1, 1), 0.65)
                else
                    print("No Fake model found in: " .. model.Name)
                end
            else
                print("No Humanoid found in: " .. model.Name)
            end
        end
    else
        warn("Titans folder not found in Workspace.")
    end
end

local function toggleESP()
    ESPEnabled = not ESPEnabled
    
    -- Destroy all existing highlights
    for _, highlight in ipairs(espParts) do
        highlight:Destroy()
    end
    espParts = {}  -- Clear the table
    
    if ESPEnabled then
        highlightModelsInTitansFolder()
        print("ESP Enabled")
    else
        print("ESP Disabled")
    end

    -- Toggle button color (if needed)
    if esptoggle.BackgroundColor3 == Color3.fromRGB(170, 0, 0) then
        esptoggle.BackgroundColor3 = Color3.fromRGB(0, 170, 0)
    else
        esptoggle.BackgroundColor3 = Color3.fromRGB(170, 0, 0)
    end
end

-- Highlight the models initially
highlightModelsInTitansFolder()
 
esptoggle.Activated:Connect(function()
    toggleESP()
end)


--AUTO ESCAPE GRAB
local buttons = LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("Interface"):WaitForChild("Buttons")

local function sendKeyPress(keyCode)
    print("Sending key press:", keyCode.Name)
    VirtualInputManager:SendKeyEvent(true, keyCode, false, game) -- Key down
    wait(0.1)  -- Shorter wait time
    VirtualInputManager:SendKeyEvent(false, keyCode, false, game) -- Key up
    print("Key press sent:", keyCode.Name)
end

buttons.ChildAdded:Connect(function(child)
    if grabEnabled == true then
        print("Child added:", child.Name)
        local key = child.Name
        local keyCode

        if key == "A" then
            keyCode = Enum.KeyCode.A  -- 'A'
        elseif key == "W" then
            keyCode = Enum.KeyCode.W  -- 'W'
        elseif key == "D" then
            keyCode = Enum.KeyCode.D  -- 'D'
        elseif key == "S" then
            keyCode = Enum.KeyCode.S  -- 'S'
        else
            warn("Unexpected child added to buttons folder")
            return
        end

        -- Adding a small delay before handling the first child addition
        wait(0.5)

        print("Pressing and releasing key:", key)
        sendKeyPress(keyCode)
    elseif grabEnabled == false then
        print("The player was grabbed but auto escape is not enabled")
    end
end)

escapetoggle.Activated:Connect(function()
    grabEnabled = not grabEnabled
    if grabEnabled == true then
        print("Auto Escape enabled")
    elseif grabEnabled == false then
        print("Auto Escape disabled")
    end

    if escapetoggle.BackgroundColor3 == Color3.fromRGB(170, 0, 0) then
        escapetoggle.BackgroundColor3 = Color3.fromRGB(0, 170, 0)
    else
        escapetoggle.BackgroundColor3 = Color3.fromRGB(170, 0, 0)
    end

end)


titansfolder.ChildAdded:Connect(function(ChildAdded)
    toggleESP()
    if ChildAdded:IsA("Model") then
        -- Only modify the newly added model
        local hitboxes = ChildAdded:FindFirstChild("Hitboxes")
        if hitboxes then
            local hit = hitboxes:FindFirstChild("Hit")
            if hit then
                local nape = hit:FindFirstChild("Nape")
                if nape and nape:IsA("BasePart") then
                    -- Store original properties and initial state
                    originalNapeProperties[nape] = {
                        Size = nape.Size,
                        Color = nape.Color,
                        Transparency = nape.Transparency,
                        Material = nape.Material,
                        IsModified = false -- Add a state tracker
                    }
                    -- Apply modifications to the new nape part
                    if extendEnabled then
                        nape.Size = Vector3.new(40, 40, 40) * extendMulti -- Adjust size as needed
                        nape.Transparency = 1
                        nape.Color = Color3.new(1, 1, 1)
                        nape.Material = Enum.Material.Neon
                        nape.CanCollide = false
                        nape.Anchored = false
                        originalNapeProperties[nape].IsModified = true
                        print("Napes Extended")
                    end
                end
            end
        end
    end
end)

local function makeGUI()
    ScreenGui.Enabled = not ScreenGui.Enabled
    print("GUI toggled")
end

-- Listen for the 'RightShift' key press
UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.RightShift then
        makeGUI()
    end
end)

--auto blade refill
local player = game.Players.LocalPlayer
local playername = player.Name
local playermodel = game.Workspace.Characters:WaitForChild(playername)
local rig = playermodel:WaitForChild("Rig_" .. playername)
local parentObject = rig:WaitForChild("LeftHand")
local childObject = parentObject:WaitForChild("Blade_1")

-- Determine if the player is on a PC or mobile device
local function isPC()
    return not game:GetService("UserInputService").TouchEnabled
end

local pc = isPC()
print("Is PC:", pc)

-- Function to simulate a key press
local function simulateKeyPress(key)
    VirtualInputManager:SendKeyEvent(true, key, false, game)
    wait(0.1)  -- Brief pause to ensure the key press is registered
    VirtualInputManager:SendKeyEvent(false, key, false, game)
end

-- Function to simulate a touch event
local function simulateTouchEvent(guiObject)
    local pos = guiObject.AbsolutePosition
    local size = guiObject.AbsoluteSize
    VirtualInputManager:SendMouseButtonEvent(pos.X + size.X / 2, pos.Y + size.Y / 2, 0, true, game, 1)
    wait(0.1)
    VirtualInputManager:SendMouseButtonEvent(pos.X + size.X / 2, pos.Y + size.Y / 2, 0, false, game, 1)
end

-- Function to check the status of the blade
local function checkBladeStatus()
    wait(0.72)
    if bladeEnabled then
        if childObject.Transparency == 1 or childObject.Parent == nil then
            if pc then
                -- If on PC, simulate pressing the R key
                simulateKeyPress(Enum.KeyCode.R)
                print("Blade refill engaged")
            else
                -- If on mobile, simulate a touch event on the "Refill" button
                local refillButton = player.PlayerGui.Interface.Mobile:FindFirstChild("Refill")
                if refillButton then
                    simulateTouchEvent(refillButton)
                    print("Blade refill engaged")
                end
            end
        end
    else
        print("Auto blade refill is not turned on")
    end
end

-- Connect the Transparency property changed signal
childObject:GetPropertyChangedSignal("Transparency"):Connect(checkBladeStatus)

-- Connect the AncestryChanged event to detect when the part's parent changes
childObject.AncestryChanged:Connect(checkBladeStatus)

bladetoggle.Activated:Connect(function()
    bladeEnabled = not bladeEnabled
    print("Blade refill toggled")
    if bladeEnabled then
        bladetoggle.BackgroundColor3 = Color3.fromRGB(0, 170, 0)
    else
        bladetoggle.BackgroundColor3 = Color3.fromRGB(170, 0, 0)
    end
end)
